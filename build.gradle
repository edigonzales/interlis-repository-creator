plugins {   
    id 'java-gradle-plugin'
    id 'maven-publish'   
    id 'com.gradle.plugin-publish' version '0.11.0'     
} 

apply from: "$rootDir/gradle/versioning.gradle"

description = 'INTERLIS Repository Creator'
group = 'ch.so.agi'

sourceCompatibility = 1.8 
targetCompatibility = 1.8 

repositories {
    mavenCentral()
    maven { url "https://jars.interlis.ch" }
} 

dependencies {
    implementation group: 'ch.interlis', name: 'iox-ili', version: '1.21.7' 
    implementation group: 'ch.interlis', name: 'ili2c-core', version: '5.2.3'
    implementation group: 'ch.interlis', name: 'ili2c-tool', version: '5.2.3'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'     
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.13'      
    testImplementation gradleTestKit()
    testImplementation group: 'junit', name: 'junit', version: '4.12'    
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.6'   
}

gradlePlugin {
    plugins {
       interlisRepositoryCreatorPlugin {
           id = 'ch.so.agi.interlis-repository-creator'
           implementationClass = 'ch.so.agi.InterlisRepositoryCreatorPlugin' 
       }
   }
}

pluginBundle {
    website = 'https://github.com/sogis/interlis-repository-creator' 
    vcsUrl = 'https://github.com/sogis/interlis-repository-creator.git' 
    tags = ['interlis', 'gis', 'sdi', 'geo', 'geoinformation', 'interlis', 'repository'] 
    
    plugins { 
        interlisRepositoryCreatorPlugin {  
            displayName = 'INTERLIS Repository Creator' 
            description = 'The Gradle INTERLIS Repository Creator plugin creates an ilimodel.xml file from a bunch of INTERLIS models.' 
        }
    }
}

task setupPluginUpload() {
    description = "Converts Gradle plugin publish key and secret from environment variable to system property. (Workaround)"
    doLast {
        def key = System.env.gradlePublishKey
        def secret = System.env.gradlePublishSecret
    
        if( !key || !secret)
        {
            throw new RuntimeException("gradlePublishKey and/or gradlePublishSecret are not defined environment variables")
        }
    
        System.properties.setProperty("gradle.publish.key", key)
        System.properties.setProperty("gradle.publish.secret", secret)
    }
}
tasks.publishPlugins.dependsOn tasks.setupPluginUpload

test {
    testLogging {
        events 'standard_out', 'standard_error'
    }
}
